(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{476:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"创建操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建操作符"}},[t._v("#")]),t._v(" 创建操作符")]),t._v(" "),a("p",[t._v("创建 RxJS 的操作符可以有多种方式。在这个版本的 RxJS 中，性能是首要考虑因素，因此，在此库中将创建的操作符依附到现有结构中的这种方式可能不那么直截了当。这是一个尝试性的文档，以告诉你如何创建一个操作符，这个操作符可以是你自己使用，也可以是用来添加到库中。")]),t._v(" "),a("p",[t._v("想了解如何为本库开发一个自定义操作符，"),a("a",{attrs:{href:"#advanced"}},[t._v("请参见下面")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"自动动手来为终端用户提供自定义的操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动动手来为终端用户提供自定义的操作符"}},[t._v("#")]),t._v(" 自动动手来为终端用户提供自定义的操作符")]),t._v(" "),a("h3",{attrs:{id:"指南"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指南"}},[t._v("#")]),t._v(" 指南")]),t._v(" "),a("p",[t._v("在大多数情况下，用户可能想要创建一个只在它们的应用中使用的操作符。可以用任何开发者觉得适合的方式来进行开发，但这里有一些指导方针：")]),t._v(" "),a("ol",[a("li",[t._v("__操作符应该永远返回一个 Observable __。你正在对一个未知的集合执行操作以创建一个新的集合。只有返回一个新的集合才有意义。如果你创建    了一个返回非 Observable 的方法，那么它就不是一个操作符，好吧。")]),t._v(" "),a("li",[a("strong",[t._v("确保对你的操作符返回的 Observalbe 内部所创建的 subscriptions 进行管理")]),t._v("。你的操作符需要订阅返回 Observable 中的源(或 "),a("code",[t._v("this")]),t._v(")，  确保它是作为取消订阅处理方法或 subscription 的一部分返回的。")]),t._v(" "),a("li",[a("strong",[t._v("确保处理传入函数中的异常")]),t._v("。如果你实现的操作符接收函数作为参数，当你调用它时，你会想要将其包裹在 "),a("code",[t._v("try/catch")]),t._v(" 中并发送\n错误到 observable 的 "),a("code",[t._v("error()")]),t._v(" 路径。")]),t._v(" "),a("li",[a("strong",[t._v("确保在返回的 Observable 的取消订阅处理方法中释放稀缺资源")]),t._v("。如果你设置了事件处理方法，或 web socket，或一些其他类似的，取消订阅\n方法是移除事件处理方法和关闭 socket 的好地方。")])]),t._v(" "),a("h3",{attrs:{id:"示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mySimpleOperator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("someCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 我们可以在这写 `var self = this;` 以保存 `this` ，但看下一条注释")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Observable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("subscriber")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为我们正在箭头函数中，`this` 来自于外部作用域。")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" source "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 保存我们的内部 subscription")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" subscription "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重点：从用户提供的回调函数中捕获错误")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("someCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 确保处理错误，然后视情况而定进行完成并发送它们")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("complete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 现在返回")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" subscription"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"将操作符添加到-observalbe-中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将操作符添加到-observalbe-中"}},[t._v("#")]),t._v(" 将操作符添加到 Observalbe 中")]),t._v(" "),a("p",[t._v("有几种方法可以做到这点。至于使用哪种方法取决于需求和偏好：")]),t._v(" "),a("ol",[a("li",[t._v("使用 ES7 函数绑定操作符 ("),a("code",[t._v("::")]),t._v(")，在像 "),a("a",{attrs:{href:"http://babeljs.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("BabelJS"),a("OutboundLink")],1),t._v(" 这样的编译器中是可用的：")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("someObservable"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mySimpleOperator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("创建你自己的 Observable 子类并重载 "),a("code",[t._v("lift")]),t._v(" 方法将其返回：")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyObservable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Observable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lift")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" observable "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyObservable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//<-- 这里是关键点")]),t._v("\n    observable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("source "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    observable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("operator "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" operator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" observable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 放在这里 .. 或 ..")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("customOperator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 做些事情并返回 Observable  */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... 放在这里...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyObservable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mySimpleOperator "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mySimpleOperator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("直接在 "),a("code",[t._v("Observable.prototype")]),t._v(" 上打补丁：")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Observable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mySimpleOperator "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mySimpleOperator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... 然后 .../")]),t._v("\n\nsomeObservable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mySimpleOperator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"作为纯函数的操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作为纯函数的操作符"}},[t._v("#")]),t._v(" 作为纯函数的操作符")]),t._v(" "),a("p",[t._v("如果你不想在 Observable 原型上打补丁的话，还可以编写纯函数作为操作符，此函数接收输入 Observable 作为参数来替代对 "),a("code",[t._v("this")]),t._v(" 关键字的依赖。")]),t._v(" "),a("p",[t._v("示例实现:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mySimpleOperator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("someCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注意这里返回的是函数")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mySimpleOperatorImplementation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("source")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Observable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("subscriber")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" subscription "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" source"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("someCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" subscriber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("complete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" subscription"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("现在可以使用 Observable 上的 "),a("code",[t._v("pipe()")]),t._v(" 方法:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" someObservable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pipe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mySimpleOperator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"将操作符作为独立的库发布"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将操作符作为独立的库发布"}},[t._v("#")]),t._v(" 将操作符作为独立的库发布")]),t._v(" "),a("p",[t._v("我们强烈推荐你将使用了 "),a("code",[t._v("let")]),t._v(" 的纯函数的自定义操作符作为独立的 npm 包。RxJS 核心已经超过100个操作符，我们不应该再增加额外的操作符了，除非它们是绝对必要的，并且提供了现有操作符无法提供的功能。")]),t._v(" "),a("p",[t._v("将其作为一个独立的库发布将保证你的操作符能够立即为社区所用，并且这是对 RxJS 社区生态的一种促进与发展，而不是让 RxJS 库变得愈发笨重。但是，在某些情况下，新操作符还是应该添加到核心库中。")]),t._v(" "),a("h2",{attrs:{id:"创建加入到此库中的操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建加入到此库中的操作符"}},[t._v("#")]),t._v(" "),a("a",{attrs:{id:"advanced"}}),t._v("创建加入到此库中的操作符")]),t._v(" "),a("p",[a("strong",[t._v("在提议将操作符加入 RxJS 库之前，请先将其作为独立的库进行发布。")]),t._v(" 参见上一节。")]),t._v(" "),a("p",[a("strong",[t._v("要创建加入到此库中的操作符，最好是基于现有的成果来工作")]),t._v("。像 "),a("code",[t._v("filter")]),t._v(" 这样的操作符会是不错的开始。没有人会期望你在读完本章后会立即成为一个专家级的操作符贡献者。")]),t._v(" "),a("p",[a("strong",[t._v("如果你觉得自己很困惑，请不要担心。按照仓库中之前的示例，提交 PR，我们同你并肩作战。")])]),t._v(" "),a("p",[t._v("当你为本库开发操作符时，希望这里所提供的信息能帮你做出决策。当开发操作符时，这里有一些需要知道并(尝试)理解的知识：")]),t._v(" "),a("ol",[a("li",[t._v("实际上所有的操作符方法都是在 "),a("code",[t._v("Observable")]),t._v(" 之外的单独模块中创建的。这是因为开发者可以通过将操作符方法提取出来并在自己的模块中\n将其方法添加到 observable 中来“构建自己的 observable ”。这也就意味着可以操作符可以单独加入并直接使用，无论是在 Babel 中使用\nES7 函数绑定操作符还是通过 "),a("code",[t._v(".call()")]),t._v(" 来使用。")]),t._v(" "),a("li",[t._v("每个操作符都有一个 "),a("code",[t._v("Operator")]),t._v(" 类。"),a("code",[t._v("Operator")]),t._v(" 类实际上是一个 "),a("code",[t._v("Subscriber")]),t._v(" “工厂”。它会被传递给 "),a("code",[t._v("lift")]),t._v(" 方法来使“魔法”发生。\n它唯一的工作就是在 subscription 上创建操作符的 "),a("code",[t._v("Subscriber")]),t._v(" 实例。")]),t._v(" "),a("li",[t._v("每个操作符都有一个 "),a("code",[t._v("Subscriber")]),t._v(" 类。 这个类完成了操作符的"),a("strong",[t._v("所有")]),t._v("逻辑。它的工作就是处理接下来的值(通常是通过重载 "),a("code",[t._v("_next()")]),t._v(" )，\n然后将其转发给 "),a("code",[t._v("destination")]),t._v("，即链中的下一个观察者。\n"),a("ul",[a("li",[t._v("重要的是要注意，在任何 "),a("code",[t._v("Subscriber")]),t._v(" 服务上设置的 "),a("code",[t._v("destination")]),t._v(" 观察者不仅仅是传递的事件的目的地，如果 "),a("code",[t._v("destination")]),t._v("\n是 "),a("code",[t._v("Subscriber")]),t._v(" 的话，它也用于设置共享底层的 "),a("code",[t._v("Subscription")]),t._v(" ，其实际上也是 "),a("code",[t._v("Subscriber")]),t._v("，并且是链中的第一个 "),a("code",[t._v("Subscriber")]),t._v(" 。")]),t._v(" "),a("li",[a("code",[t._v("Subscribers")]),t._v(" 都有 "),a("code",[t._v("add")]),t._v(" 和 "),a("code",[t._v("remove")]),t._v(" 方法，用来添加和移除共享底层的 subscription 的内部 subscriptions 。")]),t._v(" "),a("li",[t._v("当你订阅 Observable 时，传递的函数或观察者用于创建链的最终 "),a("code",[t._v("destination")]),t._v(" "),a("code",[t._v("Subscriber")]),t._v(" 。它是 "),a("code",[t._v("Subscriber")]),t._v(" ，实际上也是操作符链的共享 "),a("code",[t._v("Subscription")]),t._v(" 。")])])])]),t._v(" "),a("h3",{attrs:{id:"为操作符提交-pr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为操作符提交-pr"}},[t._v("#")]),t._v(" 为操作符提交 PR")]),t._v(" "),a("p",[t._v("请为每个要添加到 RxJS 的新操作符完成以下步骤，并作为一个 Pull Request：")]),t._v(" "),a("ul",[a("li",[t._v("将操作符添加到 Rx 中")]),t._v(" "),a("li",[t._v("必须有一个 "),a("code",[t._v("-spec.ts")]),t._v(" 的测试文件来涵盖典型用例，请使用弹珠图测试")]),t._v(" "),a("li",[t._v("如果可以的话，请再编写一个 "),a("code",[t._v("asDiagram")]),t._v(" 测试用例，用于生成 PNG 弹珠图")]),t._v(" "),a("li",[t._v("spec 文件应在末尾处有类型定义测试，以验证各种用例的类型定义")]),t._v(" "),a("li",[t._v("操作符必须在实现文件中用 JSDoc 风格的文档，同样包括 PNG 弹珠图")]),t._v(" "),a("li",[t._v("操作符应该在文件 "),a("code",[t._v("doc/operators.md")]),t._v(" 中的操作符分类中列举出来")]),t._v(" "),a("li",[t._v("还应该在操作符决策树文件 "),a("code",[t._v("doc/decision-tree-widget/tree.yml")]),t._v(" 中将其加入")]),t._v(" "),a("li",[t._v("如果操作符与 RxJS v4 中相对应的有所不同的话，你可能需要更新文件 "),a("code",[t._v("MIGRATION.md")])])]),t._v(" "),a("h3",{attrs:{id:"内部-subscriptions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内部-subscriptions"}},[t._v("#")]),t._v(" 内部 Subscriptions")]),t._v(" "),a("p",[t._v("“内部 subscriber” 或“内部 subscription” 是在操作符的主要订阅者中创建的任意 subscription 。例如，如果你要创建一个自己的 “merge” 操作符，在你想要 “合并” 的源 Observable 上接收到的 Observable 需要被订阅。这些 subscriptions 就是内部 subscriptions 。在本库中关于内部 subscriptions 的一个有趣点就是，如果你传递给并设置了 "),a("code",[t._v("destination")]),t._v(" ，它们会尝试为它们的 "),a("code",[t._v("unsubscribe")]),t._v(" 调用使用 "),a("code",[t._v("destination")]),t._v(" 。意味着如果你调用它们的 "),a("code",[t._v("unsubscribe")]),t._v("，它可能不会做任何事情。因此，通常不会为内部 subscriptions 设置 "),a("code",[t._v("destination")]),t._v(" 。一个例子可能就是 "),a("code",[t._v("switch")]),t._v(" 操作符，它具有单独的底层内部 subscription ，此内部 subscription 取消订阅需要不依赖于主 subscription 。")]),t._v(" "),a("p",[t._v("如果你发现自己创建了内部 subscriptions ，你可能真的需要检查，看看 "),a("code",[t._v("_isScalar")]),t._v(" 是否传给了 observable ，因为如果是的话，你可以直接将 "),a("code",[t._v("value")]),t._v(" 提取出来，并当操作标量 observable 时提升操作符性能。作为参考，标量 observable 是具有单一静态值的 observable 。"),a("code",[t._v("Observable.of('foo')")]),t._v(" 会返回一个 "),a("code",[t._v("ScalarObservable")]),t._v("，同样的，resolve 过的 `PromiseObservable 也充当标量。")])])}),[],!1,null,null,null);s.default=e.exports}}]);