(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{386:function(t,s,a){t.exports=a.p+"assets/img/header.a37c0504.jpeg"},452:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"译-rxjs-如何使用-refcount"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#译-rxjs-如何使用-refcount"}},[t._v("#")]),t._v(" [译] RxJS: 如何使用 refCount")]),t._v(" "),n("blockquote",[n("p",[t._v("原文链接: "),n("a",{attrs:{href:"https://blog.angularindepth.com/rxjs-how-to-use-refcount-73a0c6619a4e",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.angularindepth.com/rxjs-how-to-use-refcount-73a0c6619a4e"),n("OutboundLink")],1)])]),t._v(" "),n("p",[n("img",{attrs:{src:a(386),alt:"Cover"}})]),t._v(" "),n("p",[t._v("照片取自 "),n("a",{attrs:{href:"https://unsplash.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Unsplash"),n("OutboundLink")],1),t._v("，作者 "),n("a",{attrs:{href:"https://unsplash.com/photos/Tqcd9_j4Xjo",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mike Wilson"),n("OutboundLink")],1),t._v(" 。")]),t._v(" "),n("p",[t._v("在我的上篇文章 "),n("RouterLink",{attrs:{to:"/articles/articles/Understanding-The-Publish-And-Share-Operators.html"}},[t._v(" 理解 publish 和 share 操作符")]),t._v(" 中，只是简单介绍了 refCount 方法。在这篇文章中我们将深入介绍。")],1),t._v(" "),n("h2",{attrs:{id:"refcount-的作用是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#refcount-的作用是什么"}},[t._v("#")]),t._v(" refCount 的作用是什么？")]),t._v(" "),n("p",[t._v("简单回顾一下， RxJS 多播的基本心智模型包括: 一个源 observable，一个订阅源 observable 的 subject 和多个订阅 subject 的观察者。"),n("a",{attrs:{href:"http://cn.rx.js.org/class/es6/Observable.js~Observable.html#instance-method-multicast",target:"_blank",rel:"noopener noreferrer"}},[n("code",[t._v("multicast")]),n("OutboundLink")],1),t._v(" 操作符封装了基于 subject 的基础结构并返回拥有 "),n("code",[t._v("connect")]),t._v(" 和 "),n("code",[t._v("refCount")]),t._v(" 方法的 "),n("code",[t._v("ConnectableObservable")]),t._v("。")]),t._v(" "),n("p",[t._v("顾名思义，"),n("code",[t._v("refCount")]),t._v(" 返回的 observable 维护订阅者的引用计数。")]),t._v(" "),n("p",[t._v("当观察者订阅有引用计数的 observable 时，引用计数会增加，如果上一个引用计数为零的话，负责多播基础结构的 subject 会订阅源 observable 。而当观察者取消订阅时，引用计数则会减少，如果引用计数归零的话，subject 会取消源 observable 的订阅。")]),t._v(" "),n("p",[t._v("这种引用计数的行为有两种用途:")]),t._v(" "),n("ul",[n("li",[t._v("当所有观察者都取消订阅后，自动取消 subject 对源 observable 的订阅")]),t._v(" "),n("li",[t._v("当所有观察者都取消订阅后，自动取消 subject 对源 observable 的订阅，然后当再有观察者订阅该引用计数的 observable 时，subject 重新订阅源 observable")])]),t._v(" "),n("p",[t._v("我们来详细介绍每一种情况，然后建立一些使用 "),n("code",[t._v("refCount")]),t._v(" 的通用指南。")]),t._v(" "),n("h2",{attrs:{id:"使用-refcount-自动取消订阅"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-refcount-自动取消订阅"}},[t._v("#")]),t._v(" 使用 refCount 自动取消订阅")]),t._v(" "),n("p",[n("code",[t._v("publish")]),t._v(" 操作符返回 "),n("code",[t._v("ConnectableObservable")]),t._v(" 。调用 "),n("code",[t._v("ConnectableObservable")]),t._v(" 的 "),n("code",[t._v("connect")]),t._v(" 方法时，负责多播基础结构的 subject 会订阅源 observable 并返回 subscription (订阅)。subject 会保持对源 observable 的订阅直到调用 subscription 的 "),n("code",[t._v("unsubscribe")]),t._v(" 方法。")]),t._v(" "),n("p",[t._v("我们来看下面的示例，观察者会接收一个值，然后(隐式地)取消对调用过 "),n("code",[t._v("publish")]),t._v(" 的 observable 的订阅:")]),t._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" source "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("instrument")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Observable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("interval")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" published "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" source"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("publish")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" published"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("take")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("observer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" published"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("take")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("observer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" subscription "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" published"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("本文中的示例都将使用下面的工具函数来让源 observable 具备日志功能，以及创建有名称的观察者:")]),t._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token generic-function"}},[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("instrument")]),n("span",{pre:!0,attrs:{class:"token generic class-name"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Observable"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Observable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("observer"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Observer"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"source: subscribing"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" subscription "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" source\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("source: ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("value"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("observer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      subscription"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("unsubscribe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"source: unsubscribed"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" Observable"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token generic-function"}},[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("observer")]),n("span",{pre:!0,attrs:{class:"token generic class-name"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("next")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("observer ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(": ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("value"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("complete")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("observer ")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(": complete")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("示例的输出如下所示:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("source: subscribing\nsource: 0\nobserver a: 0\nobserver a: complete\nobserver b: 0\nobserver b: complete\nsource: 1\nsource: 2\nsource: 3\n...\n")])])]),n("p",[t._v("两个观察者都只接收一个值然后完成，完成的同时取消对调用过 "),n("code",[t._v("publish")]),t._v(" 的 observable 的订阅。但是，多播基础结构仍然保持着对源 observable 的订阅。")]),t._v(" "),n("p",[t._v("如果不想显示地执行取消订阅操作的话，可以使用 "),n("code",[t._v("refCount")]),t._v(":")]),t._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" source "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("instrument")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Observable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("interval")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" counted "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" source"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("publish")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("refCount")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" counted"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("take")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("observer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" counted"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("take")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("observer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("观察者订阅使用引用计数的 observable 的话，当引用计数归零时，负责多播的基础结构的 subject 会取消源 observable 的订阅，示例的输出如下所示:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("source: subscribing\nsource: 0\nobserver a: 0\nobserver a: complete\nobserver b: 0\nobserver b: complete\nsource: unsubscribed\n")])])]),n("h2",{attrs:{id:"重新订阅已完成的-observables"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#重新订阅已完成的-observables"}},[t._v("#")]),t._v(" 重新订阅已完成的 observables")]),t._v(" "),n("p",[t._v("当引用计数归零后，多播的基础结构除了取消源 observable 的订阅，当负责引用计数的 observable 再次发生订阅时，它还会重新订阅源 observable 。")]),t._v(" "),n("p",[t._v("我们使用下面的示例来看看当使用已完成的源 observable 时会发生什么:")]),t._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" source "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("instrument")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Observable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("timer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" counted "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" source"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("publish")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("refCount")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" counted"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("observer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("unsubscribe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("110")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" counted"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("observer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("120")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("示例中使用 "),n("code",[t._v("timer")]),t._v(" observable 作为源。它会等待指定的毫秒数后发出 "),n("code",[t._v("next")]),t._v(" 和 "),n("code",[t._v("complete")]),t._v(" 通知。还有两个观察者: "),n("code",[t._v("a")]),t._v(" 在源 observable 完成后订阅，在源 observable 完成后取消订阅；"),n("code",[t._v("b")]),t._v(" 在 "),n("code",[t._v("a")]),t._v(" 取消订阅后订阅。")]),t._v(" "),n("p",[t._v("示例的输出如下:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("source: subscribing\nsource: 0\nobserver a: 0\nsource: unsubscribed\nobserver a: complete\nobserver b: complete\n")])])]),n("p",[t._v("当 "),n("code",[t._v("b")]),t._v(" 订阅时，引用计数为零，所以多播的基础结构会期望 subject 重新订阅源 observable 。但是，由于 subject 已经收到了源 observable 的 "),n("code",[t._v("complete")]),t._v(" 通知，并且 subject 是无法复用的，所以实际上并没有进行重新订阅，"),n("code",[t._v("b")]),t._v(" 只能收到 "),n("code",[t._v("complete")]),t._v(" 通知。")]),t._v(" "),n("p",[t._v("如果使用 "),n("code",[t._v("publishBehavior(-1)")]),t._v(" 来代替 "),n("code",[t._v("publish()")]),t._v(" 的话，输出类似，但会包含  "),n("code",[t._v("BehaviorSubject")]),t._v(" 的初始值:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("observer a: -1\nsource: subscribing\nsource: 0\nobserver a: 0\nsource: unsubscribed\nobserver a: complete\nobserver b: complete\n")])])]),n("p",[t._v("同样的，"),n("code",[t._v("b")]),t._v(" 还是只能收到 "),n("code",[t._v("complete")]),t._v(" 通知。")]),t._v(" "),n("p",[t._v("如果使用 "),n("code",[t._v("publishReplay(1)")]),t._v(" 来代替 "),n("code",[t._v("publish()")]),t._v(" 的话，情况会有些变化，输出如下:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("source: subscribing\nsource: 0\nobserver a: 0\nsource: unsubscribed\nobserver a: complete\nobserver b: 0\nobserver b: complete\n")])])]),n("p",[t._v("同样的，这次也没有重新订阅源 observable，因为 subject 已经完成了。但是，已完成的 "),n("code",[t._v("ReplaySubject")]),t._v(" 将通知重放给后来的订阅者，所以 "),n("code",[t._v("b")]),t._v(" 能收到重放的 "),n("code",[t._v("next")]),t._v(" 通知和 "),n("code",[t._v("complete")]),t._v(" 通知。")]),t._v(" "),n("p",[t._v("如果使用 "),n("code",[t._v("publishLast()")]),t._v(" 来代替 "),n("code",[t._v("publish()")]),t._v(" 的话，情况又会有些不同，输出如下:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("source: subscribing\nsource: 0\nsource: unsubscribed\nobserver a: 0\nobserver a: complete\nobserver b: 0\nobserver b: complete\n")])])]),n("p",[t._v("同样的，依然没有重新订阅源 observable，因为 subject 已经完成了。但是，"),n("code",[t._v("AsyncSubject")]),t._v(" 会将最后收到的 "),n("code",[t._v("next")]),t._v(" 通知发给它的订阅者，所以 "),n("code",[t._v("a")]),t._v(" 和 "),n("code",[t._v("b")]),t._v(" 都收到的是 "),n("code",[t._v("next")]),t._v(" 和 "),n("code",[t._v("complete")]),t._v(" 通知。")]),t._v(" "),n("p",[t._v("综上所述，根据示例我们可以发现 "),n("code",[t._v("publish")]),t._v(" 以及它的变种:")]),t._v(" "),n("ul",[n("li",[t._v("当源 observable 完成时，负责多播基础结构的 subject 也会完成，而且这会阻止对源 observable 的重新订阅。")]),t._v(" "),n("li",[t._v("当 "),n("code",[t._v("publish")]),t._v(" 和 "),n("code",[t._v("publishBehavior")]),t._v(" 与 "),n("code",[t._v("refCount")]),t._v(" 一起使用时，后来的订阅者只会收到 "),n("code",[t._v("complete")]),t._v(" 通知，这似乎并不是我们想要的效果。")]),t._v(" "),n("li",[t._v("当 "),n("code",[t._v("publishReplay")]),t._v(" 和 "),n("code",[t._v("publishLast")]),t._v(" 与 "),n("code",[t._v("refCount")]),t._v(" 一起使用时，后来的订阅者会收到预期的通知。")])]),t._v(" "),n("h2",{attrs:{id:"重新订阅未完成的-observables"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#重新订阅未完成的-observables"}},[t._v("#")]),t._v(" 重新订阅未完成的 observables")]),t._v(" "),n("p",[t._v("我们已经看过了重新订阅已完成的源 observable 时会发生什么，现在我们再来看看重新订阅未完成的源 observable 是怎样一个情况。")]),t._v(" "),n("p",[t._v("这个示例中将使用 "),n("code",[t._v("interval")]),t._v(" observable 来替代 "),n("code",[t._v("timer")]),t._v(" observable，它会根据指定的时间间隔重复地发出包含自增数字的 "),n("code",[t._v("next")]),t._v(" 通知:")]),t._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" source "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("instrument")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Observable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("interval")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" counted "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" source"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("publish")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("refCount")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" counted"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("observer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("unsubscribe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("110")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" counted"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("observer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("120")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("示例的输出如下所示:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("source: subscribing\nsource: 0\nobserver a: 0\nsource: unsubscribed\nsource: subscribing\nsource: 0\nobserver b: 0\nsource: 1\nobserver b: 1\n...\n")])])]),n("p",[t._v("与使用已完成的源 observable 的示例不同的是，负责多播基础结构的 subject 能够被重新订阅，所以源 observable 可以产生新的订阅。"),n("code",[t._v("b")]),t._v(" 所收到的 "),n("code",[t._v("next")]),t._v(" 通知便是重新订阅的证据: 该通知包含数值0，因为重新订阅已经开启了全新的 "),n("code",[t._v("interval")]),t._v(" 序列。")]),t._v(" "),n("p",[t._v("如果使用 "),n("code",[t._v("publishBehavior(-1)")]),t._v(" 来代替 "),n("code",[t._v("publish()")]),t._v(" 的话，情况会有所不同，输出如下所示:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("observer a: -1\nsource: subscribing\nsource: 0\nobserver a: 0\nsource: unsubscribed\nobserver b: 0\nsource: subscribing\nsource: 0\nobserver b: 0\nsource: 1\nobserver b: 1\n...\n")])])]),n("p",[t._v("输出是类似的，可以清楚地看到重新订阅开启了全新的 "),n("code",[t._v("interval")]),t._v(" 序列。但是，在收到 "),n("code",[t._v("interval")]),t._v(" 的 "),n("code",[t._v("next")]),t._v(" 通知前，"),n("code",[t._v("a")]),t._v(" 还收到了包含 "),n("code",[t._v("BehaviorSubject")]),t._v(" 初始值-1的 "),n("code",[t._v("next")]),t._v(" 通知，"),n("code",[t._v("b")]),t._v(" 会收到包含 "),n("code",[t._v("BehaviorSubject")]),t._v(" 当前值0的 "),n("code",[t._v("next")]),t._v(" 通知。")]),t._v(" "),n("p",[t._v("如果使用 "),n("code",[t._v("publishReplay(1)")]),t._v(" 来代替 "),n("code",[t._v("publish()")]),t._v(" 的话，情况又会有所不同，输出如下所示:")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("source: subscribing\nsource: 0\nobserver a: 0\nsource: unsubscribed\nobserver b: 0\nsource: subscribing\nsource: 0\nobserver b: 0\nsource: 1\nobserver b: 1\n...\n")])])]),n("p",[t._v("输出也是类似的，可以清楚地看到重新订阅开启了全新的 "),n("code",[t._v("interval")]),t._v(" 序列。但是，"),n("code",[t._v("b")]),t._v(" 在收到源 observable 的第一个 "),n("code",[t._v("next")]),t._v(" 通知之前会收到重放的 "),n("code",[t._v("next")]),t._v(" 通知。")]),t._v(" "),n("p",[t._v("综上所述，根据示例我们可以发现，当对未完成的源 observable 使用 "),n("code",[t._v("refCount")]),t._v(" 时，"),n("code",[t._v("publish")]),t._v("、"),n("code",[t._v("publishBehavior")]),t._v(" 和 "),n("code",[t._v("publishReplay")]),t._v(" 的行为都如预期一般，没有让人出乎意料之处。")]),t._v(" "),n("h2",{attrs:{id:"sharereplay-的作用是什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sharereplay-的作用是什么"}},[t._v("#")]),t._v(" shareReplay 的作用是什么？")]),t._v(" "),n("p",[t._v("在 RxJS "),n("a",{attrs:{href:"https://github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md#540-2017-05-09",target:"_blank",rel:"noopener noreferrer"}},[t._v("5.4.0"),n("OutboundLink")],1),t._v(" 版本中引入了 "),n("a",{attrs:{href:"https://github.com/ReactiveX/rxjs/blob/5.4.3/src/operator/shareReplay.ts#L7-L26",target:"_blank",rel:"noopener noreferrer"}},[t._v("shareReplay"),n("OutboundLink")],1),t._v(" 操作符。它与 "),n("code",[t._v("publishReplay().refCount()")]),t._v(" 十分相似，只是有一个细微的差别。")]),t._v(" "),n("p",[t._v("与 "),n("code",[t._v("share")]),t._v(" 类似， "),n("code",[t._v("shareReplay")]),t._v(" 传给 "),n("code",[t._v("multicast")]),t._v(" 操作符的也是 subject 的工厂函数。这意味着当重新订阅源 observable 时，会使用工厂函数来创建出一个新的 subject 。但是，只有当前一个被订阅 subject 未完成的情况下，工厂函数才会返回新的 subject 。")]),t._v(" "),n("p",[n("code",[t._v("publishReplay")]),t._v(" 传给 "),n("code",[t._v("multicast")]),t._v(" 操作符的是 "),n("code",[t._v("ReplaySubject")]),t._v(" 实例，而不是工厂函数，这是影响行为不同的原因。")]),t._v(" "),n("p",[t._v("对调用了 "),n("code",[t._v("publishReplay().refCount()")]),t._v(" 的 observable 进行重新订阅，subject 会一直重放它的可重放通知。但是，对调用了 "),n("code",[t._v("shareReplay()")]),t._v(" 的 observable 进行重新订阅，行为未必如前者一样，如果 subject 还未完成，会创建一个新的 subject 。所以区别在于，使用调用了 "),n("code",[t._v("shareReplay()")]),t._v(" 的 observable 的话，当引用计数归零时，如果 subject 还未完成的话，可重放的通知会被冲洗掉。")]),t._v(" "),n("h2",{attrs:{id:"不完全使用准则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不完全使用准则"}},[t._v("#")]),t._v(" 不完全使用准则")]),t._v(" "),n("p",[t._v("根据我们看过的这些示例，可以归纳出如下使用准则:")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("refCount")]),t._v(" 可以与 "),n("code",[t._v("publish")]),t._v(" 及其变种一起使用，从而自动地取消源 observable 的订阅。")]),t._v(" "),n("li",[t._v("当使用 "),n("code",[t._v("refCount")]),t._v(" 来自动取消已完成的源 observable 的订阅时，"),n("code",[t._v("publishReplay")]),t._v(" 和 "),n("code",[t._v("publishLast")]),t._v(" 的行为会如预期一样，但是，对于后来的订阅，"),n("code",[t._v("publish")]),t._v(" 和 "),n("code",[t._v("publishBehavior")]),t._v(" 的行为并没太大帮助，所以你应该只使用 "),n("code",[t._v("publish")]),t._v(" 和 "),n("code",[t._v("publishBehavior")]),t._v(" 来自动取消订阅。")]),t._v(" "),n("li",[t._v("当使用 "),n("code",[t._v("refCount")]),t._v(" 来自动取消未完成的源 observable 的订阅时，"),n("code",[t._v("publish")]),t._v("、"),n("code",[t._v("publishBehavior")]),t._v(" 和 "),n("code",[t._v("publishRelay")]),t._v(" 的行为都会如预期一样。")]),t._v(" "),n("li",[n("code",[t._v("shareReplay()")]),t._v(" 的行为类似于 "),n("code",[t._v("publishReplay().refCount()")]),t._v("，在对两者进行选择时，应该根据在对源 observable 进行重新订阅时，你是否想要冲洗掉可重放的通知。")])]),t._v(" "),n("p",[t._v("上面所描述的 "),n("code",[t._v("shareReplay")]),t._v(" 的行为只适用于 RxJS 5.5 之前的版本。在 5.5.0 beta 中，"),n("code",[t._v("shareReplay")]),t._v(" 做出了"),n("a",{attrs:{href:"https://github.com/ReactiveX/rxjs/pull/2910",target:"_blank",rel:"noopener noreferrer"}},[t._v("变更"),n("OutboundLink")],1),t._v(": 当引用计数归零时，操作符不再取消源 observable 的订阅。")]),t._v(" "),n("p",[t._v("这项变化立即使得引用计数变得多余，因为只有当源 observable 完成或报错时，源 observable 的订阅才会取消订阅。这项变化也意味着只有在处理错误时，"),n("code",[t._v("shareReplay")]),t._v(" 和 "),n("code",[t._v("publishReplay().refCount()")]),t._v(" 才有所不同:")]),t._v(" "),n("ul",[n("li",[t._v("如果源 observable 报错，"),n("code",[t._v("publishReplay().refCount()")]),t._v(" 返回的 observable 的任何后来订阅者都将收到错误。")]),t._v(" "),n("li",[t._v("但是，"),n("code",[t._v("shareReplay")]),t._v(" 返回的 observable 的任何后来订阅者都将产生一个源 observable 的新订阅。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);