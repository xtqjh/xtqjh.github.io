(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{478:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"scheduler-调度器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scheduler-调度器"}},[t._v("#")]),t._v(" Scheduler (调度器)")]),t._v(" "),a("p",[a("strong",[t._v("什么是调度器？")]),t._v(" - 调度器控制着何时启动 subscription 和何时发送通知。它由三部分组成：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("调度器是一种数据结构。")]),t._v(" 它知道如何根据优先级或其他标准来存储任务和将任务进行排序。")]),t._v(" "),a("li",[a("strong",[t._v("调度器是执行上下文。")]),t._v("  它表示在何时何地执行任务(举例来说，立即的，或另一种回调函数机制(比如 setTimeout 或 process.nextTick)，或动画帧)。")]),t._v(" "),a("li",[a("strong",[t._v("调度器有一个(虚拟的)时钟。")]),t._v(" 调度器功能通过它的 getter 方法 "),a("code",[t._v("now()")]),t._v(" 提供了“时间”的概念。在具体调度器上安排的任务将严格遵循该时钟所表示的时间。")])]),t._v(" "),a("p",[a("span",{staticClass:"informal"},[t._v("调度器可以让你规定 Observable 在什么样的执行上下文中发送通知给它的观察者。")])]),t._v(" "),a("p",[t._v("在下面的示例中，我们采用普通的 Observable ，它同步地发出值"),a("code",[t._v("1")]),t._v("、"),a("code",[t._v("2")]),t._v("、"),a("code",[t._v("3")]),t._v("，并使用操作符 "),a("code",[t._v("observeOn")]),t._v(" 来指定 "),a("code",[t._v("async")]),t._v(" 调度器发送这些值。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" observable "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Rx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Observable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("observer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  observer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  observer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  observer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  observer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("complete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("observeOn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Rx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Scheduler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("async"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'just before subscribe'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobservable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'got value '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'something wrong occurred: '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("complete")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'done'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'just after subscribe'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("输出结果：")]),t._v(" "),a("div",{staticClass:"language-none extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("just before subscribe\njust after subscribe\ngot value 1\ngot value 2\ngot value 3\ndone\n")])])]),a("p",[t._v("注意通知 "),a("code",[t._v("got value...")]),t._v(" 在 "),a("code",[t._v("just after subscribe")]),t._v(" 之后才发送，这与我们到目前为止所见的默认行为是不一样的。这是因为 "),a("code",[t._v("observeOn(Rx.Scheduler.async)")]),t._v(" 在 "),a("code",[t._v("Observable.create")]),t._v(" 和最终的观察者之间引入了一个代理观察者。在下面的示例代码中，我们重命名了一些标识符，使得其中的区别变得更明显：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" observable "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Rx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Observable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("proxyObserver")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  proxyObserver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  proxyObserver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  proxyObserver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  proxyObserver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("complete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("observeOn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Rx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Scheduler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("async"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" finalObserver "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'got value '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'something wrong occurred: '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("complete")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'done'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'just before subscribe'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobservable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("finalObserver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'just after subscribe'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("proxyObserver")]),t._v(" 是在 "),a("code",[t._v("observeOn(Rx.Scheduler.async)")]),t._v(" 中创建的，它的 "),a("code",[t._v("next(val)")]),t._v(" 函数大概是下面这样子的：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" proxyObserver "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("val")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Rx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Scheduler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("async"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("schedule")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" finalObserver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 延迟时间 */")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      val "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 会作为上面函数所使用的 x */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("async")]),t._v(" 调度器操作符使用了 "),a("code",[t._v("setTimeout")]),t._v(" 或 "),a("code",[t._v("setInterval")]),t._v("，即使给定的"),a("code",[t._v("延迟时间")]),t._v("为0。照例，在 JavaScript 中，我们已知的是 "),a("code",[t._v("setTimeout(fn, 0)")]),t._v(" 会在下一次事件循环迭代的最开始运行 "),a("code",[t._v("fn")]),t._v(" 。这也解释了为什么发送给 "),a("code",[t._v("finalObserver")]),t._v(" 的 "),a("code",[t._v("got value 1")]),t._v(" 发生在 "),a("code",[t._v("just after subscribe")]),t._v(" 之后。")]),t._v(" "),a("p",[t._v("调度器的 "),a("code",[t._v("schedule()")]),t._v(" 方法接收一个 "),a("code",[t._v("delay")]),t._v(" 参数，它指的是相对于调度器内部时钟的一段时间。调度器的时钟不需要与实际的挂钟时间有任何关系。这也就是为什么像 "),a("code",[t._v("delay")]),t._v(" 这样的时间操作符不是在实际时间上操作的，而是取决于调度器的时钟时间。这在测试中极其有用，可以使用"),a("strong",[t._v("虚拟时间调度器")]),t._v("来伪造挂钟时间，同时实际上是在同步执行计划任务。")]),t._v(" "),a("h2",{attrs:{id:"调度器类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调度器类型"}},[t._v("#")]),t._v(" 调度器类型")]),t._v(" "),a("p",[a("code",[t._v("async")]),t._v(" 调度器是 RxJS 提供的内置调度器中的一个。可以通过使用 "),a("code",[t._v("Scheduler")]),t._v(" 对象的静态属性创建并返回其中的每种类型的调度器。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("调度器")]),t._v(" "),a("th",[t._v("目的")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("null")])]),t._v(" "),a("td",[t._v("不传递任何调度器的话，会以同步递归的方式发送通知。用于定时操作或尾递归操作。")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("Rx.Scheduler.queue")])]),t._v(" "),a("td",[t._v("当前事件帧中的队列调度(蹦床调度器)。用于迭代操作。")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("Rx.Scheduler.asap")])]),t._v(" "),a("td",[t._v("微任务的队列调度，它使用可用的最快速的传输机制，比如 Node.js 的 "),a("code",[t._v("process.nextTick()")]),t._v(" 或 Web Worker 的 MessageChannel 或 setTimeout 或其他。用于异步转换。")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("Rx.Scheduler.async")])]),t._v(" "),a("td",[t._v("使用 "),a("code",[t._v("setInterval")]),t._v(" 的调度。用于基于时间的操作符。")])])])]),t._v(" "),a("h2",{attrs:{id:"使用调度器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用调度器"}},[t._v("#")]),t._v(" 使用调度器")]),t._v(" "),a("p",[t._v("你可能在你的 RxJS 代码中已经使用过调度器了，只是没有明确地指明要使用的调度器的类型。这是因为所有的 Observable 操作符处理并发性都有可选的调度器。如果没有提供调度器的话，RxJS 会通过使用最小并发原则选择一个默认调度器。这意味着引入满足操作符需要的最小并发量的调度器会被选择。例如，对于返回有限和少量消息的 observable 的操作符，RxJS 不使用调度器，即 "),a("code",[t._v("null")]),t._v(" 或 "),a("code",[t._v("undefined")]),t._v(" 。对于返回潜在大量的或无限数量的消息的操作符，使用 "),a("code",[t._v("queue")]),t._v(" 调度器。对于使用定时器的操作符，使用 "),a("code",[t._v("aysnc")]),t._v(" 调度器。")]),t._v(" "),a("p",[t._v("因为 RxJS 使用最少的并发调度器，如果出于性能考虑，你想要引入并发，那么可以选择不同的调度器。要指定具体的调度器，可以使用那些采用调度器的操作符方法，例如 "),a("code",[t._v("from([10, 20, 30], Rx.Scheduler.async)")]),t._v(" 。")]),t._v(" "),a("p",[a("strong",[t._v("静态创建操作符通常可以接收调度器作为参数。")]),t._v(" 举例来说，"),a("code",[t._v("from(array, scheduler)")]),t._v(" 可以让你指定调度器，当发送从 "),a("code",[t._v("array")]),t._v(" 转换的每个通知的时候使用。调度器通常作为操作符的最后一个参数。下面的静态创建操作符接收调度器参数：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("bindCallback")])]),t._v(" "),a("li",[a("code",[t._v("bindNodeCallback")])]),t._v(" "),a("li",[a("code",[t._v("combineLatest")])]),t._v(" "),a("li",[a("code",[t._v("concat")])]),t._v(" "),a("li",[a("code",[t._v("empty")])]),t._v(" "),a("li",[a("code",[t._v("from")])]),t._v(" "),a("li",[a("code",[t._v("fromPromise")])]),t._v(" "),a("li",[a("code",[t._v("interval")])]),t._v(" "),a("li",[a("code",[t._v("merge")])]),t._v(" "),a("li",[a("code",[t._v("of")])]),t._v(" "),a("li",[a("code",[t._v("range")])]),t._v(" "),a("li",[a("code",[t._v("throw")])]),t._v(" "),a("li",[a("code",[t._v("timer")])])]),t._v(" "),a("p",[a("strong",[t._v("使用 "),a("code",[t._v("subscribeOn")]),t._v(" 来调度 "),a("code",[t._v("subscribe()")]),t._v(" 调用在什么样的上下文中执行。")]),t._v(" 默认情况下，Observable 的 "),a("code",[t._v("subscribe()")]),t._v(" 调用会立即同步地执行。然而，你可能会延迟或安排在给定的调度器上执行实际的 subscription ，使用实例操作符 "),a("code",[t._v("subscribeOn(scheduler)")]),t._v("，其中 "),a("code",[t._v("scheduler")]),t._v(" 是你提供的参数。")]),t._v(" "),a("p",[a("strong",[t._v("使用 "),a("code",[t._v("observeOn")]),t._v(" 来调度发送通知的的上下文。")]),t._v(" 正如我们在上面的示例中所看到的，实例操作符 "),a("code",[t._v("observeOn(scheduler)")]),t._v(" 在源 Observable 和目标观察者之间引入了一个中介观察者，中介负责调度，它使用给定的 "),a("code",[t._v("scheduler")]),t._v(" 来调用目标观察者。")]),t._v(" "),a("p",[a("strong",[t._v("实例操作符可能会接收调度器作为参数。")])]),t._v(" "),a("p",[t._v("像 "),a("code",[t._v("bufferTime")]),t._v("、"),a("code",[t._v("debounceTime")]),t._v("、"),a("code",[t._v("delay")]),t._v("、"),a("code",[t._v("auditTime")]),t._v("、"),a("code",[t._v("sampleTime")]),t._v("、"),a("code",[t._v("throttleTime")]),t._v("、"),a("code",[t._v("timeInterval")]),t._v("、"),a("code",[t._v("timeout")]),t._v("、"),a("code",[t._v("timeoutWith")]),t._v("、"),a("code",[t._v("windowTime")]),t._v(" 这样时间相关的操作符全部接收调度器作为最后的参数，并且默认的操作是在 "),a("code",[t._v("Rx.Scheduler.async")]),t._v(" 调度器上。")]),t._v(" "),a("p",[t._v("其他接收调度器作为参数的实例操作符："),a("code",[t._v("cache")]),t._v("、"),a("code",[t._v("combineLatest")]),t._v("、"),a("code",[t._v("concat")]),t._v("、"),a("code",[t._v("expand")]),t._v("、"),a("code",[t._v("merge")]),t._v("、"),a("code",[t._v("publishReplay")]),t._v("、"),a("code",[t._v("startWith")]),t._v("。")]),t._v(" "),a("p",[t._v("注意，"),a("code",[t._v("cache")]),t._v(" 和 "),a("code",[t._v("publishReplay")]),t._v(" 都接收调度器是因为它们使用了 ReplaySubject 。ReplaySubjects 的构造函数接收一个可选的调度器作为最后的参数，因为 ReplaySubject 可能会处理时间，这只在调度器的上下文中才有意义。默认情况下，ReplaySubject 使用 "),a("code",[t._v("queue")]),t._v(" 调度器来提供时钟。")])])}),[],!1,null,null,null);s.default=e.exports}}]);