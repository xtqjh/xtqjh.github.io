(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{432:function(t,s,a){t.exports=a.p+"assets/img/header.8fdd353a.jpeg"},433:function(t,s,a){t.exports=a.p+"assets/img/defaultObservableIfEmpty.a1e449a2.png"},434:function(t,s,a){t.exports=a.p+"assets/img/takeWhileInclusive.3d8e498f.png"},463:function(t,s,a){"use strict";a.r(s);var e=a(42),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"译-rxjs-multicast-操作符的秘密"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#译-rxjs-multicast-操作符的秘密"}},[t._v("#")]),t._v(" [译] RxJS: multicast 操作符的秘密")]),t._v(" "),e("blockquote",[e("p",[t._v("原文链接: "),e("a",{attrs:{href:"https://blog.angularindepth.com/rxjs-multicasts-secret-760e1a2b176e",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.angularindepth.com/rxjs-multicasts-secret-760e1a2b176e"),e("OutboundLink")],1)])]),t._v(" "),e("p",[e("img",{attrs:{src:a(432),alt:"Cover"}})]),t._v(" "),e("p",[t._v("照片取自 "),e("a",{attrs:{href:"https://unsplash.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Unsplash"),e("OutboundLink")],1),t._v("，作者 "),e("a",{attrs:{href:"https://unsplash.com/photos/oTjFWTHDRZQ",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tim Mossholder"),e("OutboundLink")],1),t._v(" 。")]),t._v(" "),e("p",[e("code",[t._v("multicast")]),t._v(" 操作符有一个秘密。"),e("code",[t._v("publish")]),t._v(" 操作符也是如此，它封装了 "),e("code",[t._v("multicast")]),t._v(" 。这个秘密有时候真的挺好用的。")]),t._v(" "),e("h2",{attrs:{id:"秘密"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#秘密"}},[t._v("#")]),t._v(" 秘密")]),t._v(" "),e("p",[e("code",[t._v("multicast")]),t._v(" 和 "),e("code",[t._v("publish")]),t._v(" 的文档中都提到了 "),e("code",[t._v("ConnectableObservable")]),t._v(" 。"),e("code",[t._v("ConnectableObservable")]),t._v(" 是一种特殊类型的 observable，只有调用它的 "),e("code",[t._v("connect")]),t._v(" 方法后，它才会开始向订阅者发送通知。然而，"),e("code",[t._v("multicast")]),t._v(" 和 "),e("code",[t._v("publish")]),t._v(" 操作符并非永远返回 "),e("code",[t._v("ConnectableObservable")]),t._v(" 。")]),t._v(" "),e("p",[t._v("我们先来看下 "),e("code",[t._v("publish")]),t._v(" 的"),e("a",{attrs:{href:"https://github.com/ReactiveX/rxjs/blob/5.4.3/src/operator/publish.ts#L24-L27",target:"_blank",rel:"noopener noreferrer"}},[t._v("源码"),e("OutboundLink")],1),t._v(":")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token generic-function"}},[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("publish")]),e("span",{pre:!0,attrs:{class:"token generic class-name"}},[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Observable"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  selector"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Observable"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" Observable"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Observable"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ConnectableObservable"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" selector "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("multicast")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Subject"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" selector"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("multicast")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Subject"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("可以很清楚地看出，"),e("code",[t._v("publish")]),t._v(" 只是对 "),e("code",[t._v("multicast")]),t._v(" 进行了一层很薄的封装。它创建了 subject 并传给 "),e("code",[t._v("multicast")]),t._v("，还有一个可选的 "),e("code",[t._v("selector")]),t._v(" 函数。最有趣的部分是在 "),e("code",[t._v("multicast")]),t._v(" 实现之中，它包含"),e("a",{attrs:{href:"https://github.com/ReactiveX/rxjs/blob/5.4.3/src/operator/multicast.ts#L42-L50",target:"_blank",rel:"noopener noreferrer"}},[t._v("如下代码"),e("OutboundLink")],1),t._v(":")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" selector "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("lift")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MulticastOperator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("subjectFactory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" selector"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" connectable"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" connectableObservableDescriptor"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconnectable"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("source "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconnectable"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("subjectFactory "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" subjectFactory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ConnectableObservable"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" connectable"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("只有在不传入 "),e("code",[t._v("selector")]),t._v(" 函数的情况下，"),e("code",[t._v("multicast")]),t._v(" 才返回 "),e("code",[t._v("ConnectableObservable")]),t._v("。如果传入 "),e("code",[t._v("selector")]),t._v(" 函数的话，会使用 "),e("a",{attrs:{href:"https://github.com/ReactiveX/rxjs/issues/60",target:"_blank",rel:"noopener noreferrer"}},[t._v("lift 机制"),e("OutboundLink")],1),t._v("来使得源 observable 创建出适当类型的 observable 。不需要在返回的 observable 上调用 "),e("code",[t._v("connect")]),t._v(" 方法，并且在 "),e("code",[t._v("selector")]),t._v(" 函数的作用域中会共享源 observable 。")]),t._v(" "),e("p",[t._v("这意味着 "),e("code",[t._v("multicast")]),t._v(" (以及 "),e("code",[t._v("publish")]),t._v(") 操作符可以用来轻松实现源 observable 的本地共享。")]),t._v(" "),e("h2",{attrs:{id:"使用-publish-进行本地共享"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-publish-进行本地共享"}},[t._v("#")]),t._v(" 使用 publish 进行本地共享")]),t._v(" "),e("p",[t._v("我们来看看使用 "),e("code",[t._v("publish")]),t._v(" 的示例。")]),t._v(" "),e("p",[t._v("RxJS 引入了 "),e("code",[t._v("defaultIfEmpty")]),t._v(" 操作符，它接收一个值，如果源 observable 为空的话，会将这个值发出。有时候，能够指定一个默认 observable 的话要比指定单个值有用得多，那么让我们来实现一个 "),e("code",[t._v("defaultObservableIfEmpty")]),t._v(" 函数，它可以与 "),e("code",[t._v("let")]),t._v(" 操作符一起使用。")]),t._v(" "),e("p",[t._v("下面的弹珠图展示了源 observable 为空时它的行为:")]),t._v(" "),e("p",[e("img",{attrs:{src:a(433),alt:"defaultObservableIfEmpty"}})]),t._v(" "),e("p",[t._v("RxJS 引入了 "),e("code",[t._v("isEmpty")]),t._v(" 操作符，当源 observable 完成时，它会发出布尔值以标识源 observable 是否为空。但是，要在 "),e("code",[t._v("defaultObservableIfEmpty")]),t._v(" 实现中使用它的话，需要共享源 observable，因为需要发出值的通知，而 "),e("code",[t._v("isEmpty")]),t._v(" 无法做到这点。"),e("code",[t._v("publish")]),t._v(" 操作符使得源 observable 的共享变得简单，实现如下所示:")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token generic-function"}},[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("defaultObservableIfEmpty")]),e("span",{pre:!0,attrs:{class:"token generic class-name"}},[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  defaultObservable"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Observable"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Observable"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" Observable"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" source "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" source"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("publish")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shared "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" shared"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("merge")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    shared"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEmpty")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mergeMap")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("empty "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" empty "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n      defaultObservable "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      Observable"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token generic-function"}},[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("empty")]),e("span",{pre:!0,attrs:{class:"token generic class-name"}},[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("传给 "),e("code",[t._v("publish")]),t._v(" 的 "),e("code",[t._v("selector")]),t._v(" 函数接收共享的源 observable 。"),e("code",[t._v("selector")]),t._v(" 返回的 observable 是由共享源 observable 和根据源 observable 是否为空得到的 observable (如果源 observable 为空，则为传入的默认 observable，否则为空 observable) 的组合而成。")]),t._v(" "),e("p",[t._v("源 observable 的共享完全是由 "),e("code",[t._v("publish")]),t._v(" 管理的。使用 "),e("code",[t._v("selector")]),t._v(" 函数，就能够根据需要多次订阅共享 observable，而不会影响源 observable 后面的订阅。")]),t._v(" "),e("h2",{attrs:{id:"使用-multicast-进行本地共享"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-multicast-进行本地共享"}},[t._v("#")]),t._v(" 使用 multicast 进行本地共享")]),t._v(" "),e("p",[t._v("我们来看另一个示例，这次使用 "),e("code",[t._v("multicast")]),t._v(" 。")]),t._v(" "),e("p",[t._v("RxJS 引入了 "),e("code",[t._v("takeWhile")]),t._v(" 操作符，它返回的 observable 会发出源 observable 的值，直到不满足给定条件的值出现，此刻 observable 完成。不满足条件的那个值不会被发出。我们来实现一个 "),e("code",[t._v("takeWhileInclusive")]),t._v(" 函数，它可以与 "),e("code",[t._v("let")]),t._v(" 操作符一起使用。")]),t._v(" "),e("p",[t._v("下面的弹珠图展示了值不满足条件时的行为:")]),t._v(" "),e("p",[e("img",{attrs:{src:a(434),alt:"takeWhileInclusive"}})]),t._v(" "),e("p",[t._v("可以使用 "),e("code",[t._v("takeWhile")]),t._v(" 操作符作为基础来实现，当不满足条件时，只需要再连接不满足条件的那个值即可。要在 "),e("code",[t._v("takeWhile")]),t._v(" 返回的 observable 完成后取得这个值，可以使用 "),e("code",[t._v("ReplaySubject")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token generic-function"}},[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("takeWhileInclusive")]),e("span",{pre:!0,attrs:{class:"token generic class-name"}},[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("predicate")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Observable"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" Observable"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" source "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" source"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("multicast")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReplaySubject"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    shared "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" shared\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("takeWhile")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("predicate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shared"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("take")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("predicate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("这里使用了缓冲区大小为1的 "),e("code",[t._v("ReplaySubject")]),t._v(" 来共享源 observable 。当 "),e("code",[t._v("takeWhile")]),t._v(" 操作符返回的 observable 完成时，共享的 observable 是串联的，使用 "),e("code",[t._v("take(1)")]),t._v(" 可以确保只考虑重放的值，而 "),e("code",[t._v("filter")]),t._v(" 可以确保只有当不满足条件时才进行追加。")]),t._v(" "),e("h2",{attrs:{id:"这种方式可靠吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#这种方式可靠吗"}},[t._v("#")]),t._v(" 这种方式可靠吗？")]),t._v(" "),e("p",[t._v("RxJS 5 是相当新的库，它的文档扔在进行中，所以这种方式还没有在文档中出现，只是在内部使用。公开的 "),e("a",{attrs:{href:"https://github.com/ReactiveX/rxjs/blob/5.4.3/src/operator/multicast.ts#L7-L10",target:"_blank",rel:"noopener noreferrer"}},[t._v("TypeScript 签名"),e("OutboundLink")],1),t._v("指出了并非永远返回的是 "),e("code",[t._v("ConnectableObservable")]),t._v("，也有相对应的"),e("a",{attrs:{href:"https://github.com/ReactiveX/rxjs/blob/5.4.3/spec/operators/multicast-spec.ts#L86-L144",target:"_blank",rel:"noopener noreferrer"}},[t._v("单元测试"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("p",[t._v("RxJS 通常比较灵活，因此实现这些函数还有其他方式，但上面的示例说明了当需要本地共享源 observable 时，"),e("code",[t._v("publish")]),t._v(" 和 "),e("code",[t._v("multicast")]),t._v(" 简单易用，值得考虑。")])])}),[],!1,null,null,null);s.default=n.exports}}]);